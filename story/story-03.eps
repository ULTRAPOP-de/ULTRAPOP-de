%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G2016) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 720 380
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 720 380
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ZGGEFJ+Inter-ExtraBold
%!FontType1-1.0: ZGGEFJ+Inter-ExtraBold 3.7%%CreationDate: 8/31/19% Copyright 2019 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (3.7) readonly def/FullName (Inter Extra Bold) readonly def/FamilyName (Inter) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -426 def/UnderlineThickness 294 defend readonly def/FontName /ZGGEFJ+Inter-ExtraBold def/PaintType 0 def/FontType 1 def/FontMatrix [0.0004 0 0 0.0004 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /uni0048 putdup 34 /uni0065 putdup 35 /uni006C putdup 36 /uni006F putdup 37 /uni003F putdup 38 /uni0021 putreadonly def/FontBBox {-2317 -768 4650 3074} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEE52D4E04AF3FC04947CD11FDD8B7751E259364C306DBC4A68113F4892635223E80A7117259B37A207E75AEA1557849737C78F26CBC9D5073BFDD3AC0D7DBC6E43F1C9A9A70322047BE2517CCB5E9A5187E3D907D50F5D824FCB6AD0D57DD36C0D6F0FC4C472D287D45A19A5DFAD5A997E4ED5EED7E6610C4E097F7645BAB7BC16BDC355B249EA5A13250383F9A3D7E08CF57310EDE6C0A9746E5D59AA01CC323BB88FCCC83B2F366A4182DA2C664615C0DA1024A5EBDEF9B42D8C4672816D36712592EC431D01E86C69DD4E5C4AB6DF65ED46657C9A6EB1A7520702BC7F084C036E3E8597096B7278FA7AAD6AD5547D7E04BF79A96729A1711CD087E049B23D5FFD0A4AC52C723B4FF83D9754DD969717D3C087A0FB4B217E0E4448EF79F777604D2AE3D8D8C5AFF728BA391344F9156381693E1B7A6B75BD079FD4D1AF85248C17F42AC8137D1A6763F7542A78E64FB94CE6BB7846C16813778C5058D970218E0F41127318A57E5649CEF745C639517F9E9D1523D5F539206BC7BBC2AE106C3131CF23A8B0497CCA5A01ADA8803FE31BF06BB65ADBB5D2A1AECB79C0AF75C03B5EEA39341CC6C1C4C294D83B350F5FB203EBBC307A53FE3384D3F291E5F7D165FFD35D25BA7234413333DC62DE48290815D669972978C84FA364DE535BEC27CFF0D6D1BBCB2ABD5B142D3F6CC8AB226F60642FF75364FE73942CDE9EE0BE433241CDD3630B99CFA6E40D4F7A916C4C4EB166A7D17F0AA73F77F79960173D384B39D4D54D3BC7D7CA38859263C09412165D7576D2D3A14FF21F3F2A45DB23CB8F7BF7D93008E7594787C4A186D87EF3704AFD54E77A893060102F3D5CC7D0032DFC66DB25E1988FDDF72C26E53F73843BD1A543C8BECDEC27C33FD6B5B88226AD72C5F7ED33FE3E2190A7E9979ABAD25C77D19B17AFB2ED9EABA4DB722C6254E4A5ED213111D1101A274A5C909C6B1669D5AEE37282261B400E429091071F0C5B61DA3F330C999F3607BA0E0D509720B119BF625C16B8AE0DC3FAEE951811E9529D9A5A7FBEFC7D5017083669E25284407AB446E4C1FA9D660D3497251B0060839B64AE4617D27A733561EC44A3853ECE53B6801F5C3DA30A94A09D54893931D734CF0F861EEFE66FD5CCB9A14AB02F0D618243212DBBC26CA2308BA2D39C0076E27F1BE349D9D7AAAC59C8CF28F1126A30239DA3F345B4B104028FACB781E7052CDA3FF4A8794B339083FCF25AE8FD98BFE366A8117427ED671ACD2F8822C54E50F94F0644DB3BC1E6A5E26A108B4256842D0CD3064FB7AC1431E95A4627580BE83AFFD527E99D3231414696407B14CB599CBC031E11A455F87A6576164D42B462D8B8DD5DF857DE7B1753C28714481EB99FEBB50E00C230D9E5B1A6AE329F6764504A96AE826A075E8D49C3F8DF8354296CE063D631AD206E8DE035787A9844676177415951E31976510EC01941490EAC640DA647CDCE9AB42D261D637AA29E1EDB5568118B27F39806AA692C0DE4DB1204F9A41BED473B4E663BAF1D6F4CB02240C1F95CF761E28D41FFD906B874D2AE6EEFE220082B33D9801D89216E956DE862FD2079E0092D4B86079D67AD56D69EAD467CE3F6093B96BD4E7C6835BC96B7E6EB5891210AB06E49014752D027E4653D71FAA33E1E12DBF7ECA46F468131D8ECAD7E5CC64381983E50B5BD5E18F0BEB2540AF0BC76AC78D82A2C6D0304E0E8F45396903AF08354CEEE8CD7DDE797904B6951756CDE98AAFEA09F8DE0E15C2F9FABB7F49917B688BF9C85B9B0AFCF6BAA8780B096E34A3ADE40329796A96B8B4C2254353B32E96F983002C4470752BE27C66EAFC4D43B303C0E06A229A81AF917E7F7B4CBDAA7B6A7047A06841B8E49E9A4194346BA37D1CEAA186E039AD591F24704AC5456F000F6A498D8CF52B3C95559B8F3407D1EDE1A9A19E7BAC3984B42D4ABA0D2F6849F3CAD00393239CADEDCA35003C27B562319609E952ADFA1921B6957D202A31C0E9771E72ED2B1F28C95B41793EBC578EC3B3B3EA3973ED6D97136FCEE74D80C86AA2B8EA90EA61819F207810CA9FCCCF1DE7748E2DEF2B0A9E20B4BE45583C53816F39762345C6F032DD5E42B68211FB3770B818EC9822C3BAA30FA1D77B419CDD6B75E7DE7DECADDE0971EDC96D49D33B0F83104E3916D695DAE7451BDAE8F6703A02D4E29D9C51604A6F7258286D10F54C1E5BD0DD76F86FFBFA6C9B3E90DCF5E6B60D06A5D17F7941B93F1899F81DCBCCEB493D6B14E2D2D43263EA8E56624E4C1BBC8086DD2B8D741CA98E2A8847B821465AB0AF64D051F5C820DCD1993D229F038FD411B90493B828AA5E29D15E777AE651BAF366C0422D5D2D7A0F3F114E35933922FFC1721919C46949827D8F2DF3B59441AAAD6985E75654FC470F1995B027F55F4A65CA25B94532A0850BAA05D371459E2AD63ABFD491D79E41F9BE962E592F19741F1C3B294E68CD4AFA633B3BBEA53F3168DE46FDCBE32A6F4FDFA4A9DEFCCB07371FC4EA9C12CB8A4B1C146D9B20959071DA0A66EA851A910BB63CB43306D1E99C171DF86BDBD6E242C11AF8A93CB0CABDA0E3CC393BB9CFAE5749847B3559E0B16B0354E34F6E9A1D5D6AF6B9FD9E72E4972738B3408B9CF3F800FE740613DE0A01301E425B37A92D68B78AB5173045ABD1B220D55E05696187D9522B1F9A1BF9FEF5DE8E2C5AB32FEB749EE1599C430666CCDC50FBCBCE4B5CE205DD58FE1DEFF0D4DC0A1C63607FBD2A239A760C90F5DB21585814CF3518FF729F5C9633E5F2651A7537C17267B80BA45C699038878011BA26CF6D2AA5B556B8E4ADB09EE8E719F34DB67ABDC9E03731F70F0EB3158EC1B3C6DF9A57CF13323752AC6D19AF495BEC4A57FA05CEB9EFA9F90BE44D632FBEB70CA271953C8F861070915A4F949B59B47BADC7152B544045C227670C5573A0A0A3EA716722762E3DB852F1FC28EC497599E2EC56E75BB8D0D3C1F505CBB39975BE90A309BD80387EDD6AE6AD987730BB9D0836615527420DC0DEEF31CF57152B1747B89E736B315E1AA0B4047C566D8C3E82BF416ED4323408939717DA66FDEF464A4BD744A4C1D8B732796A9DE37CC329FC947366C446CA99CFC7069A0397A16E4DFFF5BDEAFC1C83609E3A1C34C4E70FFE5C8BB30E2C70F1CF3E04E45666BFB425066637F534478A8A9A5AC360730EA17FAA9BF6DDCD754311EA8D26003161B4E35A692EECB613CFCECAE3B8CFF2439CBA35E6374F72499A23153B4ABD7A6235261DFEBA98443CD40506B05FE6BFFA3426D169ACCAFCDF7A2777DE932536B154A7A0FC69AC92162C9A0EDC8C9484C1E886414EB1EEFA1D02FE98010CB124A75DA2EA7FF5E7FCD4DF5DBCE55E7E84F478EFDAAE34AA005B18C299B855BEBC600BFE28D65A3DBE7CA58E44F12804BE22E39D0E8DE9FFAD58C3F59E6003EEBF6208E5A665F3E5C5D5EE9CBF3D8371B7FF14FC36C5847D09C6CE3352DC4C1366AC464D0642520A302963C185A39348696BBDF11C21BE85CB20ACB6D920FC2A45DE41AFAE1FB2C30BD8ABD4B03ABA94225E8E9E2C680A05A9D4635DA0722C5CD2F1B9121A8C6A7D8387B9E3B120D64B817119F1FA580E9651418379C0FBE70EE52F8F5DCB36B7A27E4BB07941D02925A80BDE021A4350C8478096767583B31C9BF00A80D5D9ECA58066394937293B2ACAD783EA355D818709177ABE4C909DFC396B062F4FF7454FCD0EE9F2F8D9B1F0E0916AF61C0B7F83F05EE249241C56CB72432616913870BCA1F16324479B803D17FBDA389EA2AA772576BE6785A780A3D972AE4EB60612E22E8986A5DAFA4D284350B93B86E11101C77B64EE2C3AA8C602696FFB997602835E857616C1FBB1DA21E287D797A84F8E189E418B18CA9C8E4CBC0BBCC1E0EC3C77B158280A91C8F6186FFDD1B30F6517448067E2A5B70542FD099DFAA1DEDD4BACB47E7062BF099CCA01870D50374A540E61D634D594027F47C1A9E473A180E1637580714490837FF36F6EC8FD4E5B9A77922710C2239882A8CB4229A20B445FE25740297422F7FD9285CF07443FA1D84325AB0E9A5DA873BAA040473EE13EF0CA559B939E856BDA0108EDE66FC5B2166FCDFA5715D7FADF1B0D30ABFF75B9E7970DCC86FEE1546B500CBD855AD6936B697512E14C5F4FECB6D0E8A0AEC7AE6496C57580E4F5B87EFEA79F6D13191837411BA24175140822A2CD12803B92BD0148989C590B9425FCCA6E266394C76AF36ADA1984D47F89865C1D956BEB0BAAC3BDB504DE730D1B3860619D5F6F6E8D34768E76CB51D001D4B4780CE3013DE829D2E36CDC81965296CCFB1139525638F67C35A4F3F36644EBB4EC23115FF21C7F1C1CF0A05366EF8ABAC306C4EAB38AEC8F868E498AFC859D5CD6E8A23AB3E8E9EEEC6ED3EA9FD0327933C2480D054C238764F7EE62865B7C4F3F670C71579ADFB7B45C36311C902A4CED567F31D89AD77F19263C05AD6ADC35D89D2B5CD602DFCA6A4AA0F36CDB3550685BB73B31B3D68036389DCB791EA799D875608416F643D879E86B2DEC61E115C6641A801D487E38A7CAF974D5B32F91235C1319ADE39FF62A4C6D16E6EC628CAA55BA61D5920A1539323DA67A92FEC6F28290FCC95E35DD3C56A0CB7DE53CADEFF0CE2B662BDF143F9085F00F9A2CCE6DFC099FCBBAF0B3C676C7E8DEF907C5140B5D0977A1779C7B6A1959D447E9E2CE1692A91ED553A79F28220B5B53C9625728E253AE1FA94FD04088C68F96F0037B567C8EBDFD2074BF4CD6AF498B67C3D756B64CB1D6B4A5D678DDFE379376BB9C607C1D862E415D44F9D8D01E766D892C9500C6E122B7DD23C35C3E9B98C7621597AA7C2A051D61671F8185110EFBB0BDC65234945A11E07CD7FB574B5CB379A313B2A40CF4E6129353EF746B35304A80B7D4E363D04B3BAEE0A9D61AF41EDBDF2614CD26AEC4F5804A741AEEDE043FBFDD33884ED2923AB2B11BF06D1CB976E9FD0256D88352CC0F68A9E818F8BEFA82DCACC577F2698DEFB8B6FFAE4CF6C9A528922D1A2A0B016834E2175C0D75ACEE671DD8F8D8544A6392B3979BCAEB6167FABD0DD2A981C22DF754D1EB993327E94EDE967B02779777830EF7F9E2B519ECE7368F461527007DA0D82F3E9820751CC8EF4175D762AFBDF666D6B3A458907A18F3DECCB4794A49A7D27A7676BB314C5F587717F5EF14E683FC41180FEA9C09C10C417D3418FC0EE82E18F8847B5CCE47F4FE3EC508BA4B57CB8079D9818DFD7A0C785B240F635103B6ECBE76BF25AACC2AE2A43B41C39115186E5D9CED3F5AD986F13DA31171B881BF2E6D8F299CB9DAB1F7EFFFB619F2BD6F3EAFDFAF81642D48F049927DBBA6E2E53817F86028AC29324D9A954DA2403B2324FEDCC972CB65E2E31922B963B41722D1DAD581C7422C15172960C10DB2ECEC825D19122D9C135DD76EAB879C49887BAF53A53E0005829C6209FCC37F6D338E2FBE9F159E38AB91B779F5A8329EF09F1CDE768278035AEE39230C9D7DC119F49584B4180C7B00B507AAF5CEFC265AD17BC267F6A46116C37EC016C41010706A5B4DF70A1FBC1D86245528E51A5BE8C424CB3D9669A4555491CEA424E7295932065AF3C89D9837A6F7E4B4988D84DE278764972330FE36F32EA49FEAF7BBB0F5946B929AC875386219ADC707EE9CAD4FF33A6C699DE36F8B17190F8D6788F6DE620874AFB574182271764CBEDE178BD37A1BF91E09CE8BCFD8FDAF0CACA8AF87F6AFA18CE09CDA2D25EC9D822581D30D8B2476773F23D982F47CC88D4FEF2336B78427D1329C0520A042F72B59A83E1E4C4EB3B85D328AE1E452A602A5A0CB40BE5345C8BF232358550ED50A972EDD5DD4EA45D321CC0795D4244A2C64F12ED253D483BC5CE57B42E62244EAFFD14C320100BB3ED636B6E7FDE9523D0FB694A5D4AA6A2633CE1F6B364E6DD75E6007D5FBA9D66DF88D746D70A8E8757133B68E37B29FD7E0FCADF135F02AA152C6AC20BC350444B9CC17F09344488BC94B501632EE587F38A060EF23A765322D8137A9DFBAFA7960C11E5BF0CEC40C41EA44293DECD66BD29C8D5967A3D06B5EAB5E4C1AC52F41442C7AD13A4C0096208179DDD1F13A347AA90EF8AA860E3DD36BF80898ACE031FC0C1805BBCE7C045167636D6605FF37EABC662A044C7E6898BCE2A9DE7AD91BFE8DBBA4A0097C7066B5CDDE7928D368DDAF2579B38064D3BB9B60347F7D59FC4E957B5AD33F3538000C6288CEF5E5629DA63321033E97C51E0CFFD5DEFD75C57DBDC178C1526970BCF39DD2215F0182A97F0AFB6A4B504BBB757FDA5CF771D0C9AD084F6B5FFB2A0584829CC2591E09F8FB4C18D59D4053D2700A04CBA36A77A1D22A0AEB7CA2E047A81B1332A12C746C39885DC2AF441D3D248AE612EA3D77057488BAA37812F1B5DA47D0AB76B713B9240157D8FAA2D9B668CAA2383E0DC9977C84BF3D8037925ACD93E24548BBF530CA5E35F5FA593CFAA569CB10A0627FBD44EACF791115C57E04D1EDE45BC3821F3ECEB127BE183614CB28976D33B1DDF64A8FAF62BB9F73731EEF6312F700398E1B29DB25AA075CD55B0B9DB33D00336CD121322161738970E13D3F8B39445C2F94ED0B115936A2C14CEF26124A720390A216B3DDDD2B5EA1CCCDC3567BEA07FD8FCFFBEF531B163C0F3D579656379D2CF100D5BE1E6EFA96809EBB993A1F4784C64FCAC9FC0EA1CC9857CA9A751D1E490CDED4BAD062AE67F3CD199EE6B1E8E063CE082CCFC5A8A720E1758FD1B6CA10D6DD37A3E5A76003507B0B097E668F27755865AFA7E585F3D927280F7388A32535A5B21B5ACCEDD688D2FFAB346DF900CB8FF6537040D24B2215E92A06B2F207C2079E66E562C10C430501CFCBF772436BAC6B5FAE3D7F81D46802BB25CCBA764A44787C927C49676475D191AD2677078EF6B42C6F6185A27EF4C82941B7DBECD720040E90CD80124D9E81F420EA751D982D48568BCC9AF78408DD4956138A0095860F351B23A03BE6490224BEB4FCDE06E7C956F5697C9BF263405CCD9A38ACCB52C9D2FCF97B7363146981DFC67FF9B4D61A957F0FA47C3B8C844408C1957FF0EA33CAF062CDC572A1AE06FE6C03BD745B08FCE350E1DEF729B8795619263CF5D5A92A1232A17439FE68CDB7E40486253568322A108865E9ED1D95BA45594D2B95FBAD87773A42554AE635519FD4AA6B8671A1282752F68945BE707E6E9A26E5F8FF07A6713753335EFBC2267693D2EC1AA178B19B36CA20707A62D6DF1ABDC774CC40E3ABD83D2E05E4B0BC30DF253FCD25083134A47D0BDDDA12A9A497ACC28EB53E6AAA3928EC4D8C1CF57B1A030FADEB93BA28D02DBFD210C5747FF37F86CACF1D33575344E4D2CD3F74F0C2B2872E725F00AAC3A59A8755BA9703D5695429DBE9B8F8B90AEF13493191539334386271835CC2A27FFCA529C0BF0744A1D09E79CEA61A60618AA34C166B53E39078794E8EC598322F2A642273BD927B36A22E88CBBB3B7EC1D3BA4D308F416B71A8A44B799C265A837E4FDB1F32075FE33F90FC730E2D892D445846DC0158064C2F4C5D7DC4B48535B8A2B483F94380C509A58B377D5BFCC1E22A7863D9DD867AAD7580B2DEAE6DE2D900F9553D5DB7149F64B99F78898E73CF5EA356C5C27A61830405CF43FCDF9A042B2510A1B54354CAD3F58D4A4358C1F73F5538AEDD129022BA4D87D8F492A01E0E5D2FB14B2EFBB8F600307FC256F784657C2F993B4EC3749BE6AB8CC00CD9D04357B07F58548CBA0709180EF65414DC1540BE1E4ED6D7B190AFF3A03A0780126A925FD4802887ED3903DB0267AEF70352B116513DD81E53160DBEB0FA753038104D9DDFB63F030758D9F1BCA6C304DEA938795952BE4E3D1137F0D63D27BA1E65CBC27F2BD041C2EA72A3CFBDEB48817204124FAB71116AA85A417BD2D7204CB6E5CFB23B4FE2D13A97FA56C7D95A911EDCAF80B93C22CAE4159CCFE773D9ADEB01924A394C2273221EA59D675098B5890DAF09D18C3EBD63AC56EF4FAC7FF301BF4BF97B3F7D6B1F15E6143963E60399FD2942B749EAF886140D82D7BBC1875798E9B783809FBBBB713C70DB8B226E257309FB2C7E550BBE47481BCEA8F50577D69C538ADE630B2996C968D72A92D7BCF86C591E7806BD3BD57AE87DECBBC2DC7B309041BFD2617952596187203E4B107D8117583B16C7D25309426C8C3E0CBE62089581860943CC07E64F93C5929958173E21AD36A377A896703D2537E880C7346C2C44A0161418B71341B69041C558DB1B86266EC69E10A7F18C4347DAA325BDEBF3515E822934B67C06FADFE5D2ABDBD87DCBE2A67B36433C6540D5592ABF1DBF070272CD19712926E230DD0AACE05B8AF6C749DC0BC60081F33730DE8952A97849E07E8F1FBBAAB714C3CE78CA009A0AF796FCCA89172FBF6766DE2042068EB039898E52B55DC608F1DE6858A7B84D4E372B3B8DE981886AAFD54D5FC5A2010CDA2143CDA321A0DABB7B22C8BC6BC1A3C79CD3115FC9717BD00B264B1A83D7783AB0124D67DC96743079A7699C487083112DADB887B1185437C5C88729917C941E396D2E32392C5D833A4FC5CCA179FC9F82B5F07B9118EDC69ACE596554AEA2C85079FF2EA654468F38A356E27372F11492FE2D4693C5D87B1AEA135794F90D9BF30F6FFB5093C566568CFC3893BE6FA4923F0E36B43F7B6B6F23656740F89D0DB6335FC4A6B2766A3C845CB02D859B0BBC4AD12846E9DFED1FA037403467D34A96D825C6322EFAC7E2049C3B487299DB844E0585B4E6494D405BD8AF6E005ABFEC957038B303543FAF4BFF02891BD0F66129656D66FD9B5858D4FADBEE0D085DA15405A8806787C7DC10E5F736C4CDB79029416444CAE31D53AF0719736A68372A32FC78ACDD1A2D497131998C31A1AAD3704FF72532A422EB2A3F0EBFA950EB49111272366C4D83494D555184E39C35F70D40685622079AEB66A470DB8824F0B58B90CC633E66805F7E11677947E36F849AA65343193F93D722C738858A0B83BB0DBB248D133E6834CEA9DD0D5E20888E226342AB26B4C03DF74D68AD1EF7D41B096F2CE1AE13543FC5CD1A4DE08AE1D1DBAF97E16B5B28A745C022BD0FE2A5B6331CA06424B0060F0E46B69079538BBA9D206BADA490B0FAB40A5B59ED2051CC4F654B2CB6E7A71FF3429DF113E03062BD6F363C507C5ACA188A565D9BA2DDA246073DC3948EA060878FCC8921B96969A5A19719B6B473D18B799673AAF4EBFA3DFCD32DEBA4A5A66A4DBF829565307DCC1CF0A0529955D2D21EB0E76BFF10286E6DAB789FD74BC1E24200215EC045E29EAADBBC9BCC7194EA1297DBA929D0E62B7711AD6E0639647C1EBA74F92B156FA6900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/ZGGEFJ+Inter-ExtraBold cguidfix
/F1.1/ZGGEFJ+Inter-ExtraBold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.099249616 0.095094085 0.27768919 sc
q
342.25 263.71985 m
350.82172 263.71985 353.93912 273.98193 358.80896 279.61349 c
362.29324 283.64276 368.23981 282.44128 370 288.08215 c
374.42615 302.26666 362.57959 312.25 347.125 312.25 c
331.67041 312.25 321.25 303.49432 319 290.33215 c
316.75 277.17001 326.79541 263.71985 342.25 263.71985 c
h
W*
296.5 243.87793 102 78.122063 rc
313.6857 317.25 m
375.93762 317.25 l
375.93762 258.71985 l
313.6857 258.71985 l
h
f
Q
0.69897962 0.54567963 0.40313229 sc
q
343.19672 272.88242 m
339.74078 276.93896 337.40173 281.91034 337.79257 287.4809 c
338.91876 303.53128 361.26138 300.0004 365.60751 291.89954 c
369.95361 283.79871 369.43719 263.25024 363.82022 261.8024 c
361.5802 261.22501 356.80826 262.6394 351.95154 265.56677 c
355 244 l
337 244 l
343.19672 272.88242 l
h
W*
296.5 243.87793 102 78.122063 rc
332 303.75 m
373.5 303.75 l
373.5 239 l
332 239 l
h
f
Q
0.099249616 0.095094085 0.27768919 sc
q
350.78482 283.20749 m
350.13083 283.55347 349.38147 283.75 348.58499 283.75 c
346.03485 283.75 343.96753 281.73529 343.96753 279.25 c
343.96753 278.23563 344.31192 277.29965 344.89294 276.54706 c
343.79889 274.74371 343.05219 272.849 342.80743 270.90118 c
339.01529 270.90118 325.17517 285.25 338.96259 298.75 c
352.75 312.25 372.6745 292.97803 366.68738 291.8541 c
363.24509 291.20792 356.31238 287.92157 350.78482 283.20749 c
h
W*
296.5 243.87793 102 78.122063 rc
327.97925 308.52921 m
372.78055 308.52921 l
372.78055 265.90118 l
327.97925 265.90118 l
h
f
Q
0.60000002 0.4614 0.34799999 sc
q
331 181.53052 m
359.22311 88.746925 l
372.89511 9.8404551 l
383.6149 9.8404551 l
369.16824 181.53052 l
331 181.53052 l
h
W*
235 2 225 179.53052 rc
326 186.53052 m
388.6149 186.53052 l
388.6149 4.8404551 l
326 4.8404551 l
h
f
Q
0.69897962 0.54567963 0.40313229 sc
q
320.90329 181.53052 m
322.82028 130.58734 320.56424 104.30992 320.13519 99.681511 c
319.70615 95.053101 313.83115 65.042252 299.92276 8.2866983 c
311.34549 12.231693 l
333.32639 64.284935 340.81671 91.337921 343.33774 98.173134 c
345.8588 105.00835 352.55457 132.79414 363.42505 181.53052 c
320.90329 181.53052 l
h
W*
235 2 225 179.53052 rc
294.92276 186.53052 m
368.42505 186.53052 l
368.42505 3.2866988 l
294.92276 3.2866988 l
h
f
Q
0.89253825 0.89253825 0.89253825 sc
q
300.00861 12.395274 m
299.16953 10.15541 298.75 8.4794731 298.75 7.3674645 c
298.75 6.0149999 298.97531 4.0414176 299.42593 1.4467175 c
300.99487 1.4467175 315.09534 1.4467175 341.72729 1.4467175 c
342.82657 5.0808372 342.19199 7.0427814 339.82361 7.33255 c
337.45523 7.6223192 335.48779 7.8839569 333.92126 8.1174641 c
314.25998 16.882555 l
313.88168 17.051212 313.43826 16.881247 313.26959 16.502924 c
313.26672 16.496452 313.26392 16.489941 313.26123 16.483389 c
311.99741 13.417696 l
309.8049 12.394729 308.02328 11.883245 306.6525 11.883245 c
305.53879 11.883245 304.00073 12.333038 302.03836 13.232626 c
302.03836 13.232635 l
301.28528 13.577857 300.39493 13.247226 300.04971 12.49415 c
300.03485 12.461692 300.02112 12.428712 300.00861 12.395274 c
h
W*
298 2 45.75 29.446718 rc
293.75 21.947729 m
347.25 21.947729 l
347.25 -3.5532825 l
293.75 -3.5532825 l
h
f
Q
q
370.50861 12.395274 m
369.66953 10.15541 369.25 8.4794731 369.25 7.3674645 c
369.25 6.0149999 369.47531 4.0414176 369.92593 1.4467175 c
371.49487 1.4467175 385.59534 1.4467175 412.22729 1.4467175 c
413.32657 5.0808372 412.69199 7.0427814 410.32361 7.33255 c
407.95523 7.6223192 405.98779 7.8839569 404.42126 8.1174641 c
384.75998 16.882555 l
384.38168 17.051212 383.93826 16.881247 383.76959 16.502924 c
383.76672 16.496452 383.76392 16.489941 383.76123 16.483389 c
382.49741 13.417696 l
380.3049 12.394729 378.52328 11.883245 377.1525 11.883245 c
376.03879 11.883245 374.50073 12.333038 372.53836 13.232626 c
372.53836 13.232635 l
371.78528 13.577857 370.89493 13.247226 370.54971 12.49415 c
370.53485 12.461692 370.52112 12.428712 370.50861 12.395274 c
h
W*
368.5 2 45.75 29.446718 rc
364.25 21.947729 m
417.75 21.947729 l
417.75 -3.5532825 l
364.25 -3.5532825 l
h
f
Q
0.40988538 0.6304245 0.67453229 sc
q
327.25 181.53052 m
339.25 134.25826 l
375.90274 134.25826 l
370.43765 181.53052 l
327.25 181.53052 l
h
W*
235 2 225 179.53052 rc
322.25 186.53052 m
380.90274 186.53052 l
380.90274 129.25826 l
322.25 129.25826 l
h
f
Q
0.53651023 0.77344537 0.79977149 sc
q
320.5 181.53052 m
316.55157 169.62898 315.80157 153.87157 318.25 134.25826 c
355.65274 134.25826 l
365.93765 181.53052 l
320.5 181.53052 l
h
W*
235 2 225 179.53052 rc
311.84427 186.53052 m
370.93765 186.53052 l
370.93765 129.25826 l
311.84427 129.25826 l
h
f
Q
0.69897962 0.54567963 0.40313229 sc
q
394.28885 250.98694 m
422.72708 259.50745 l
428.03033 263.63577 433.03317 266.65335 437.7356 268.56021 c
439.10345 268.81677 441.36847 268.66544 438.54065 265.45578 c
435.71283 262.24612 432.88287 258.74261 433.69199 257.39529 c
434.5011 256.04794 437.44458 257.06094 438.29834 254.927 c
438.86749 253.50438 433.99033 252.48947 423.66678 251.88229 c
401.56033 238.87837 l
394.28885 250.98694 l
h
391.79352 200.75742 m
415.71286 183.17342 l
422.20145 181.42255 427.62219 179.24312 431.97504 176.63515 c
433.00314 175.69713 434.24539 173.79715 429.98022 174.12393 c
425.71509 174.45071 421.21393 174.60234 420.62485 173.14532 c
420.03574 171.68829 422.61618 169.94713 421.42575 167.98106 c
420.63214 166.67036 416.88644 169.95467 410.18866 177.834 c
386.49927 187.66304 l
391.79352 200.75742 l
h
W*
0 0 720 380 rc
381.49927 273.6441 m
444.89508 273.6441 l
444.89508 162.70067 l
381.49927 162.70067 l
h
f
Q
0.12453748 0.15000969 0.6339817 sc
q
354.49673 248.00285 m
367.51663 223.68033 386.35034 205.03883 413.65726 185.66327 c
403.31033 173.98201 l
372.81705 185.31912 356.72382 192.1602 348.82846 215.14175 c
346.84689 220.90967 345.46756 239.29858 344.28186 248.97375 c
354.49673 248.00285 l
h
W*
0 0 720 380 rc
341.1879 256.74533 m
431.40289 232.5723 l
413.57938 166.05406 l
323.36438 190.2271 l
h
f
Q
0.95070684 0.95070684 0.95070684 sc
q
318.25 167.25821 m
376 167.25821 l
362.91867 207.21661 356.23621 234.64157 355.95267 249.5331 c
355.9382 250.29228 354.53827 251.63007 353.91891 251.45488 c
349.38965 250.17369 344.54294 250.65274 339.37885 252.89201 c
325.68811 230.83876 320.95361 203.68672 318.25 167.25821 c
h
W*
0 0 720 380 rc
313.25 257.89203 m
381 257.89203 l
381 162.25821 l
313.25 162.25821 l
h
f
Q
0.1215 0.15592501 0.81 sc
q
344.35962 252.85641 m
360.91342 252.72066 387.77075 249.69302 418.74475 259.65259 c
421.80273 244.34856 l
398.39288 229.26894 374.68845 217.58755 353.91742 219.24638 c
362.93707 180.49608 362.52124 148.77486 342.60834 148.77486 c
333.09897 148.77486 322.83487 148.77486 311.8161 148.77486 c
306.92557 181.69281 319.77881 227.33438 331.6947 250.35561 c
332.14975 251.23473 333.11856 252.89201 335.40048 252.89201 c
337.38879 252.89201 340.37122 252.89201 344.34781 252.89201 c
344.35175 252.88016 344.35568 252.86829 344.35962 252.85641 c
h
W*
0 0 720 380 rc
305.75 264.65259 m
426.80273 264.65259 l
426.80273 143.77486 l
305.75 143.77486 l
h
f
Q
10 w
1 J
1 j
0.59200001 0.59200001 0.59200001 sc
q
376 388 m
544 388 l
544 275 l
376 275 l
h
438.94357 307 m
419 290 l
423.07761 307 l
398 307 l
394.134 307 391 310.134 391 314 c
391 366 l
391 369.866 394.134 373 398 373 c
522 373 l
525.86597 373 529 369.866 529 366 c
529 314 l
529 310.134 525.86597 307 522 307 c
438.94357 307 l
h
W*
0 0 720 380 rc
1 0 0 -1 391 373 cm
47.943584 66 m
28 83 l
32.077599 66 l
7 66 l
3.1340067 66 0 62.865993 0 59 c
0 7 l
0 3.1340067 3.1340067 0 7 0 c
131 0 l
134.866 0 138 3.1340067 138 7 c
138 59 l
138 62.865993 134.866 66 131 66 c
47.943584 66 l
h
S
Q
0.59215689 0.59215689 0.59215689 sc
q
0 0 720 380 rc
1 0 0 -1 407 362 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 35 m
(!"##$%)[ 26.910511 21.694602 10.201705 10.201705 22.282670 0.000000 ] xS
Q
7.5 w
0.59200001 0.59200001 0.59200001 sc
q
111 217 m
238 217 l
238 129 l
111 129 l
h
160.13139 154.69879 m
145.10146 142 l
148.17442 154.69879 l
129.25 154.69879 l
126.3505 154.69879 124 157.0493 124 159.94879 c
124 198.75 l
124 201.64949 126.3505 204 129.25 204 c
219.75 204 l
222.64949 204 225 201.64949 225 198.75 c
225 159.94879 l
225 157.0493 222.64949 154.69879 219.75 154.69879 c
160.13139 154.69879 l
h
W*
0 0 720 380 rc
1 0 0 -1 124 204 cm
36.131397 49.301205 m
21.10145 62 l
24.174423 49.301205 l
5.25 49.301205 l
2.3505051 49.301205 0 46.950699 0 44.051205 c
0 5.25 l
0 2.3505051 2.3505051 0 5.25 0 c
95.75 0 l
98.649498 0 101 2.3505051 101 5.25 c
101 44.051205 l
101 46.950699 98.649498 49.301205 95.75 49.301205 c
36.131397 49.301205 l
h
S
Q
0.59215689 0.59215689 0.59215689 sc
q
0 0 720 380 rc
1 0 0 -1 136.05797 195.78313 cm
/F1.1[ 27 0 0 -27 0 0]sf
0 26 m
(!"##$&)[ 20.182884 16.270952 7.651278 7.651278 16.712003 0.000000 ] xS
Q
3.75 w
0.59200001 0.59200001 0.59200001 sc
q
224 279 m
296.5 279 l
296.5 226 l
224 226 l
h
253.0657 243.3494 m
245.55072 237 l
247.0872 243.3494 l
237.625 243.3494 l
236.17525 243.3494 235 244.52464 235 245.9744 c
235 265.375 l
235 266.82474 236.17525 268 237.625 268 c
282.875 268 l
284.32474 268 285.5 266.82474 285.5 265.375 c
285.5 245.9744 l
285.5 244.52464 284.32474 243.3494 282.875 243.3494 c
253.0657 243.3494 l
h
W*
0 0 720 380 rc
1 0 0 -1 235 268 cm
18.065699 24.650602 m
10.550725 31 l
12.087212 24.650602 l
2.625 24.650602 l
1.1752526 24.650602 0 23.475349 0 22.025602 c
0 2.625 l
0 1.1752526 1.1752526 0 2.625 0 c
47.875 0 l
49.324749 0 50.5 1.1752526 50.5 2.625 c
50.5 22.025602 l
50.5 23.475349 49.324749 24.650602 47.875 24.650602 c
18.065699 24.650602 l
h
S
Q
0.59215689 0.59215689 0.59215689 sc
q
0 0 720 380 rc
1 0 0 -1 241.02899 263.89157 cm
/F1.1[ 13.5 0 0 -13.5 0 0]sf
0 13 m
(!"##$&)[ 10.091442 8.135476 3.825639 3.825639 8.356001 0.000000 ] xS
Q
0.59200001 0.59200001 0.59200001 sc
q
531 147 m
458 147 l
458 94 l
531 94 l
h
501.75543 111.3494 m
509.34482 105 l
507.79312 111.3494 l
517.375 111.3494 l
518.82477 111.3494 520 112.52465 520 113.9744 c
520 133.375 l
520 134.82475 518.82477 136 517.375 136 c
471.625 136 l
470.17526 136 469 134.82475 469 133.375 c
469 113.9744 l
469 112.52465 470.17526 111.3494 471.625 111.3494 c
501.75543 111.3494 l
h
W*
0 0 720 380 rc
-1 0 0 -1 520 136 cm
18.244566 24.650602 m
10.655188 31 l
12.206886 24.650602 l
2.625 24.650602 l
1.1752526 24.650602 0 23.475349 0 22.025602 c
0 2.625 l
0 1.1752526 1.1752526 0 2.625 0 c
48.375 0 l
49.824749 0 51 1.1752526 51 2.625 c
51 22.025602 l
51 23.475349 49.824749 24.650602 48.375 24.650602 c
18.244566 24.650602 l
h
S
Q
0.59215689 0.59215689 0.59215689 sc
q
0 0 720 380 rc
1 0 0 -1 475 132 cm
/F1.1[ 13.5 0 0 -13.5 0 0]sf
0 13 m
(!"##$&)[ 10.091442 8.135476 3.825639 3.825639 8.356001 0.000000 ] xS
Q
5.625 w
0.59200001 0.59200001 0.59200001 sc
q
163 353 m
262.75 353 l
262.75 282.5 l
163 282.5 l
h
202.09854 304.02411 m
190.82608 294.5 l
193.13081 304.02411 l
178.9375 304.02411 l
176.76288 304.02411 175 305.78699 175 307.96161 c
175 337.0625 l
175 339.23712 176.76288 341 178.9375 341 c
246.8125 341 l
248.98712 341 250.75 339.23712 250.75 337.0625 c
250.75 307.96161 l
250.75 305.78699 248.98712 304.02411 246.8125 304.02411 c
202.09854 304.02411 l
h
W*
0 0 720 380 rc
1 0 0 -1 175 341 cm
27.098547 36.975903 m
15.826087 46.5 l
18.130817 36.975903 l
3.9375 36.975903 l
1.7628788 36.975903 0 35.213024 0 33.038403 c
0 3.9375 l
0 1.7628788 1.7628788 0 3.9375 0 c
71.8125 0 l
73.987122 0 75.75 1.7628788 75.75 3.9375 c
75.75 33.038403 l
75.75 35.213024 73.987122 36.975903 71.8125 36.975903 c
27.098547 36.975903 l
h
S
Q
0.59215689 0.59215689 0.59215689 sc
q
0 0 720 380 rc
1 0 0 -1 184.04347 335.83734 cm
/F1.1[ 20.25 0 0 -20.25 0 0]sf
0 20 m
(!"##$&)[ 15.137163 12.203214 5.738459 5.738459 12.534002 0.000000 ] xS
Q
0.59200001 0.59200001 0.59200001 sc
q
607.75 221 m
508 221 l
508 150.5 l
607.75 150.5 l
h
568.65143 172.02409 m
579.92389 162.5 l
577.6192 172.02409 l
591.8125 172.02409 l
593.98712 172.02409 595.75 173.78697 595.75 175.96159 c
595.75 205.0625 l
595.75 207.23712 593.98712 209 591.8125 209 c
523.9375 209 l
521.76288 209 520 207.23712 520 205.0625 c
520 175.96159 l
520 173.78697 521.76288 172.02409 523.9375 172.02409 c
568.65143 172.02409 l
h
W*
0 0 720 380 rc
-1 0 0 -1 595.75 209 cm
27.098547 36.975903 m
15.826087 46.5 l
18.130817 36.975903 l
3.9375 36.975903 l
1.7628788 36.975903 0 35.213024 0 33.038403 c
0 3.9375 l
0 1.7628788 1.7628788 0 3.9375 0 c
71.8125 0 l
73.987122 0 75.75 1.7628788 75.75 3.9375 c
75.75 33.038403 l
75.75 35.213024 73.987122 36.975903 71.8125 36.975903 c
27.098547 36.975903 l
h
S
Q
0.59215689 0.59215689 0.59215689 sc
q
0 0 720 380 rc
1 0 0 -1 529.04346 203.83736 cm
/F1.1[ 20.25 0 0 -20.25 0 0]sf
0 20 m
(!"##$&)[ 15.137163 12.203214 5.738459 5.738459 12.534002 0.000000 ] xS
ep
end
